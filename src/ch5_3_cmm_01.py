questions = [
  [7, 14, 12, 5, 13, 3, 3, 7, 20],
  [9, 20, 14, 18, 4, 9, 17, 19],
  [14, 20, 3, 4, 13, 17, 18, 11],
  [15, 14, 13, 5, 13, 19, 14, 18, 19],
  [10, 9, 13, 19, 16, 19, 10, 7, 19],
  [3, 16, 6, 4, 20, 11, 7, 18, 12],
]

# 출력은 다음과 같은 형태로 한다.
# sizes=[7, 14, 12, 5, 13, 3, 3, 7, 20]
# 2058 (((7x14) x ((14x12) x ((12x5) x (((5x13) x (13x3)) x (3x3))))) x ((3x7) x (7x20)))
# sizes=[9, 20, 14, 18, 4, 9, 17, 19]
# 5436 (((9x20) x ((20x14) x ((14x18) x (18x4)))) x (((4x9) x (9x17)) x (17x19)))
# sizes=[14, 20, 3, 4, 13, 17, 18, 11]
# 3633 (((14x20) x (20x3)) x (((((3x4) x (4x13)) x (13x17)) x (17x18)) x (18x11)))
# sizes=[15, 14, 13, 5, 13, 19, 14, 18, 19]
# 8920 (((15x14) x ((14x13) x (13x5))) x (((((5x13) x (13x19)) x (19x14)) x (14x18)) x (18x19)))
# sizes=[10, 9, 13, 19, 16, 19, 10, 7, 19]
# 10094 (((10x9) x ((9x13) x ((13x19) x ((19x16) x ((16x19) x ((19x10) x (10x7))))))) x (7x19))
# sizes=[3, 16, 6, 4, 20, 11, 7, 18, 12]
# 2517 ((((((((3x16) x (16x6)) x (6x4)) x (4x20)) x (20x11)) x (11x7)) x (7x18)) x (18x12))
# ...

def cmm():
  global sizes, C, P
  print(f'{sizes=}')
  mc = len(sizes) - 1        # mc=matrix count. 행렬의 수 이다
  C = [[ 0 for _ in range(...) ] for _ in range(...) ] # C[s][e] 에는 s 부터 e 까지 곱할 때의 최소연산수를 담는다 # 0으로 초기화
  P = ...                    # P[s][e] 에는 s 부터 e 까지 곱할 때 마지막 곱셈을 할 인덱스를 담는다
  for sub in range(...): # 부분문제의 크기. 2부터 mc 까지 진행한다. mc 도 포함한다
    for s in range(...): # 부분문제가 시작되는 위치. 마지막 숫자에 주의한다.
      e = s + sub - 1            # 부분문제가 끝나는 위치
      ...             # s부터 e까지의 초기값을 넣고
      for k in range(...):    # k 를 s 부터 e 까지 옮겨가면서 마지막 곱셈을 어디서 할지 비교한다. e 는 포함하지 않아야 한다
        ....          # k 번째에서 마지막 곱셈을 할 경우
        if ....:      # 이득이 있다면
          ....        # 횟수를 저장한다
          ....        # 마지막 곱셈 위치를 저장한다
  print(C[1][mc], result(1, mc)) # 최종적으로 1 부터 mc 까지 곱할 때의 결과를 출력한다

def result(s, e):
  global sizes, C, P
  if s == e:              # 시작과 끝이 같다면 행렬의 곱셈이 아닌 행렬 1개의 크기
    return f'[{sizes[s-1]}x{sizes[s]}]'
  p = P[s][e]             # 마지막 곱셈의 위치
  if p == 0: return ''    # 만약 여기 걸리면 버그이다. 이럴리가 없다
  a = result(s, p)        # s 부터 p 까지의 곱셈 문자열
  b = result(p+1, e)      # p+1 부터 e 까지의 곱셈 문자열
  return f'({a} × {b})'   # 두 결과끼리의 곱셈 형태로 리턴한다

for q in questions:
  sizes = q
  cmm()
