n_vertices = 12
edges = [
    (0, 6, 194), (0, 7, 59), (0, 9, 372), (1, 11, 125), (2, 4, 345), 
    (2, 8, 246), (2, 9, 293), (2, 10, 166), (4, 8, 82), (4, 10, 164), 
    (5, 6, 119), (5, 7, 232), (6, 7, 169), (8, 9, 286), (8, 10, 193), 
    (9, 10, 150), (3, 4, 100), (3, 8, 200), (1, 5, 150), (5, 11, 250),
]

# 함수는 사용하지 않고 작성한다 (키워드 def 를 사용하지 않는다)
# 결과는 12x12 의 표 형태로 비용을 출력한다.

# 1. Edge List -> Adj Matrix 형태로 변환 
# 2. 2차원 배열 D 에 0, 비용, inf 중 하나를 넣어 초기화
INF = float('inf')
D = [[ INF for _ in range(n_vertices) ] for _ in range(n_vertices) ]
for i in range(n_vertices):
    D[i][i] = 0
for u,v,w in edges:
    D[u][v] = w
    D[v][u] = w
print(D)
# 3. k 를 0 부터 11 까지 변환하며 비용 갱신
for k in range(n_vertices):
  for i in range(n_vertices):
    if i == k: continue
    for j in range(n_vertices):
      if j == i or j == k: continue
      pass

# 4. (opt) 갱신할 때 i 부터 j 까지 가려면 k 로 가야한다 라는 내용도 추가 저장
# 5. D 의 내용을 출력한다
for i in range(n_vertices):
  for j in range(n_vertices):
    print(f'{D[i][j]:4d} ', end='')
  print()
     #   0  441  665  786  686  291  194   59  658  372  522  541 
     # 441    0 1106 1227 1127  150  269  382 1099  813  963  125 
     # 665 1106    0  428  328  956  859  724  246  293  166 1206 
     # 786 1227  428    0  100 1077  980  845  182  414  264 1327 
     # 686 1127  328  100    0  977  880  745   82  314  164 1227 
     # 291  150  956 1077  977    0  119  232  949  663  813  250 
     # 194  269  859  980  880  119    0  169  852  566  716  369 
     #  59  382  724  845  745  232  169    0  717  431  581  482 
     # 658 1099  246  182   82  949  852  717    0  286  193 1199 
     # 372  813  293  414  314  663  566  431  286    0  150  913 
     # 522  963  166  264  164  813  716  581  193  150    0 1063 
     # 541  125 1206 1327 1227  250  369  482 1199  913 1063    0 

# 6. (opt) 12x11 의 경로들을 모두 출력해도 좋다. 이 경우 함수를 이용한다

