questions = [
  [5, 11, 7, 16, 9, 17, 16, 16, 6, 12],
  [14, 14, 8, 6, 4, 19, 12, 3, 3, 8],
  [16, 18, 8, 3, 7, 11, 11, 4, 12, 4],
  [12, 13, 4, 19, 13, 13, 9, 16, 18, 16],
  [16, 10, 18, 13, 18, 8, 3, 3, 6, 6],
  [11, 17, 13, 16, 7, 12, 12, 11, 14, 12],
]

# 출력은 다음과 같은 형태로 한다.
# sizes=[5, 11, 7, 16, 9, 17, 16, 16, 6, 12]
# 5910 (((((((((5x11) x (11x7)) x (7x16)) x (16x9)) x (9x17)) x (17x16)) x (16x16)) x (16x6)) x (6x12))

def cmm(sizes):
  print(f'{sizes=}')
  mc = len(sizes) - 1        # mc=matrix count. 행렬의 수 이다
  C = ...                    # C[s][e] 에는 s 부터 e 까지 곱할 때의 최소연산수를 담는다
  P = ...                    # P[s][e] 에는 s 부터 e 까지 곱할 때 마지막 곱셈을 할 인덱스를 담는다
  for sub in range(2, mc+1): # 부분문제의 크기. 2부터 mc 까지 진행한다
    for s in range(1, mc-sub+2): # 부분문제가 시작되는 위치
      e = s + sub - 1            # 부분문제가 끝나는 위치
      ...             # s부터 e까지의 초기값을 넣고
      for k in range(s, e+1):    # k 를 s 부터 e 까지 옮겨가면서 마지막 곱셈을 어디서 할지 비교한다
        ....          # k 번째에서 마지막 곱셈을 할 경우
        if ....:      # 이득이 있다면
          ....        # 횟수를 저장한다
          ....        # 마지막 곱셈 위치를 저장한다
  print(C[1][mc], result(sizes, P, 1, mc)) # 최종적으로 1 부터 mc 까지 곱할 때의 결과를 출력한다

def result(sizes, P, s, e):
  if s == e:                               # 시작과 끝이 같다면 행렬의 곱셈이 아닌 행렬 1개의 크기
    return f'({sizes[s-1]}x{sizes[s]})'
  p = P[s][e]                              # 마지막 곱셈의 위치
  if p == 0: return ''          # 만약 여기 걸리면 버그이다. 이럴리가 없다
  a = result(sizes, P, s, p)    # s 부터 p 까지의 곱셈 문자열
  b = result(sizes, P, p+1, e)  # p+1 부터 e 까지의 곱셈 문자열
  return f'({a} x {b})'         # 두 결과끼리의 곱셈 형태로 리턴한다

for q in questions:
  cmm(q)

# sizes=[5, 11, 7, 16, 9, 17, 16, 16, 6, 12]
# 5910 (((((((((5x11) x (11x7)) x (7x16)) x (16x9)) x (9x17)) x (17x16)) x (16x16)) x (16x6)) x (6x12))
# sizes=[14, 14, 8, 6, 4, 19, 12, 3, 3, 8]
# 2424 (((14x14) x ((14x8) x ((8x6) x ((6x4) x (((4x19) x ((19x12) x (12x3))) x (3x3)))))) x (3x8))
# sizes=[16, 18, 8, 3, 7, 11, 11, 4, 12, 4]
# 2454 (((16x18) x ((18x8) x (8x3))) x (((((3x7) x (7x11)) x (11x11)) x (11x4)) x ((4x12) x (12x4))))
# sizes=[12, 13, 4, 19, 13, 13, 9, 16, 18, 16]
# 6404 (((12x13) x (13x4)) x (((((((4x19) x (19x13)) x (13x13)) x (13x9)) x (9x16)) x (16x18)) x (18x16)))
# sizes=[16, 10, 18, 13, 18, 8, 3, 3, 6, 6]
# 3306 (((16x10) x ((10x18) x ((18x13) x ((13x18) x ((18x8) x (8x3)))))) x ((3x3) x ((3x6) x (6x6))))
# sizes=[11, 17, 13, 16, 7, 12, 12, 11, 14, 12]
# 9422 (((11x17) x ((17x13) x ((13x16) x (16x7)))) x (((((7x12) x (12x12)) x (12x11)) x (11x14)) x (14x12)))
